CREATE TABLE IF NOT EXISTS GENRE
(
    ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR
);

CREATE TABLE IF NOT EXISTS OPERATION
(
    ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR NOT NULL
);
CREATE TABLE IF NOT EXISTS EVENT_TYPE
(
    ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS FILM
(
    ID          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME        VARCHAR,
    DESCRIPTION VARCHAR(200),
    RELEASEDATE DATE,
    DURATION    INT,
    RATE        VARCHAR
    );

CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    FILM_ID  INTEGER NOT NULL REFERENCES FILM (ID),
    GENRE_ID INTEGER NOT NULL REFERENCES GENRE (ID)
    );

CREATE TABLE IF NOT EXISTS MPA
(
    ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS FILM_MPA
(
    FILM_ID INTEGER NOT NULL REFERENCES FILM (ID),
    MPA_ID  INTEGER NOT NULL REFERENCES MPA (ID)
    );

CREATE TABLE IF NOT EXISTS USERS
(
    ID       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL    VARCHAR,
    LOGIN    VARCHAR NOT NULL,
    NAME     VARCHAR,
    BIRTHDAY DATE
);

CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID INTEGER NOT NULL REFERENCES FILM (ID),
    USER_ID INTEGER NOT NULL REFERENCES USERS (ID)
);

CREATE TABLE IF NOT EXISTS REVIEWS
(
    ID            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CONTENT       VARCHAR,
    STATUS        VARCHAR,
    USER_ID       INTEGER REFERENCES USERS (ID),
    FILM_ID       INTEGER REFERENCES FILM (ID),
    CREATION_DATE DATE
    );

CREATE TABLE IF NOT EXISTS REVIEWS_LIKES
(
    REVIEW_ID     INTEGER REFERENCES REVIEWS (ID),
    USER_ID       INTEGER REFERENCES USERS (ID),
    USERFUL       VARCHAR,
    CREATION_DATE DATE
    );

CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    USER_ID           INT REFERENCES USERS (ID),
    FRIEND_ID         INT REFERENCES USERS (ID)
    );

CREATE TABLE IF NOT EXISTS FEED
(
    EVENT_ID      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID       INTEGER NOT NULL REFERENCES USERS (ID),
    OPERATION_ID  INTEGER NOT NULL REFERENCES OPERATION (ID),                                        -- одно из значениий REMOVE, ADD, UPDATE
    EVENT_TYPE_ID INTEGER NOT NULL REFERENCES EVENT_TYPE (ID),                                       --одно из значениий LIKE, REVIEW или FRIEND
    ENTITY_ID     INTEGER NOT NULL REFERENCES USERS (ID) REFERENCES FILM (ID) REFERENCES REVIEWS (ID)--идентификатор сущности, с которой произошло событие
    );
